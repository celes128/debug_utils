#pragma once

#include <vector>
#include <string>
#include "Key.h"
#include "ConsoleHistory.h"
#include "EditBox.h"
#include "Interpreter.h"
#include "OvwRingBuf.h"

namespace dbgutils {

	class Console {
	public:
		Console(Interpreter interpreter = Interpreter(), size_t historyCapacity = 32, size_t outputCapacity = 32);

		//		ACCESSORS
		//
		// cmdline returns the string in the command line.
		const std::wstring &cmdline() const;

		// caret returns the position of the caret in the command line string.
		size_t caret() const;

		// output_size returns the number of strings stored in the output buffer.
		size_t output_size() const { return m_output.size(); }

		// get_output returns a specific output string from a given index.
		//
		// INPUT
		//	size_t i
		//		Index of the output string to obtain.
		//		i = 0 corresponds to the latest output i.e. the output generated by
		//		the most recent command.
		//		i = output_size() - 1 corresponds to the oldest output i.e. the output generated by
		//		the odlest command.
		std::wstring get_output(size_t i) const;

		//		MANIPULATORS
		//
		// All handle_xxx functions return true iff the command line content or the caret changed.
		bool handle_character(wchar_t c);
		bool handle_key(Key key);

	private:
		const EditBox & cur_editbox() const;
		EditBox & cur_editbox();

		// ENTER/RETURN key press handling.
		// Execute the command line.
		bool handle_enter_key();
		void exec_cmdline_and_store_output();
		void add_cmdline_to_history_and_reset_iteration();

		bool handle_up_key();
		bool handle_down_key();

		void clear_editboxes_and_set_up_new_one();

		// Small functions that increase readability.
		//
		bool cmdline_is_empty() const;

	private:
		// Command interpreter.
		Interpreter					m_interpreter;

		// The history stores the content of previous command lines
		// when the user presses the ENTER/RETURN key.
		ConsoleHistory				m_history;

		// These editboxes are used to manage the command line.
		// When the user presses the UP key to look up in the history,
		// a new edit box is created and becomes the current one.
		std::vector<EditBox>		m_editboxes;
		size_t						m_i{ 0 };

		// Output strings generated by the interpreter and commands
		// when the user presses the ENTER/RETURN key.
		OvwRingBuf<std::wstring>	m_output;
	};
}